#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
@import ZappPlugins;
#endif

#import <ApplicasterSDK/ApplicasterSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ApplicasterSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14ApplicasterSDK24APAVPlayerViewController")
@interface APAVPlayerViewController : AVPlayerViewController
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APApplicasterController (SWIFT_EXTENSION(ApplicasterSDK))
- (void)startActivitiesListener;
- (void)pauseActivitiesListener;
- (void)resumeActivitiesListener;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomChannelEntry")
@interface APAtomChannelEntry : APAtomEntry <APChannelProtocol>
@property (nonatomic) BOOL playOnLoad;
@property (nonatomic) BOOL needsPurchaseCheck;
@property (nonatomic, readonly, copy) NSString * _Nullable streamURL;
@property (nonatomic, readonly, copy) NSString * _Nullable splashURL;
@property (nonatomic, readonly, copy) NSString * _Nullable prerollURL;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable epgURL;
@property (nonatomic, readonly, copy) NSString * _Nullable nowPlaying;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImageURL;
@property (nonatomic) BOOL shouldSkipAds;
@property (nonatomic) BOOL shouldClosePlayerOnChannelSwitching;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomChannelEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK29APAtomEntryExtensionsProtocol_")
@protocol APAtomEntryExtensionsProtocol
@optional
@property (nonatomic, readonly) BOOL isFree;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


@interface APAtomEntryPlayable (SWIFT_EXTENSION(ApplicasterSDK))
- (void)loadVodItemWithProvider:(NSString * _Nonnull)provider accountId:(NSString * _Nonnull)accountId broadcasterId:(NSString * _Nonnull)broadcasterId itemId:(NSString * _Nonnull)itemId signature:(NSString * _Nonnull)signature completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)loadAtomEntryContentUrl:(void (^ _Nonnull)(NSString * _Nullable))completion;
@end

@class APAtomFeed;

SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomFeedLoader")
@interface APAtomFeedLoader : NSObject
+ (void)loadWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APAtomFeedLoader (SWIFT_EXTENSION(ApplicasterSDK))
+ (void)loadPipesWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
@end

@protocol APAtomEntryProtocol;

SWIFT_CLASS("_TtC14ApplicasterSDK17APAtomPipesParser")
@interface APAtomPipesParser : NSObject
+ (id _Nullable)parseWithModel:(id <APAtomEntryProtocol> _Nullable)model parentModel:(id <APAtomEntryProtocol> _Nullable)parentModel data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (id <APAtomEntryProtocol> _Nonnull)populateEntryWithModel:(id <APAtomEntryProtocol> _Nonnull)model data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDate:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDateWithDateString:(NSString * _Nullable)dateString localeString:(NSString * _Nullable)localeString dateFormatterString:(NSString * _Nullable)dateFormatterString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZPCategoryProtocol;
@class NSString;

SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomProgramEntry")
@interface APAtomProgramEntry : APAtomEntry <APProgramProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable programDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable liveImageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable thumbURL;
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable mediumURL;
@property (nonatomic, readonly, copy) NSString * _Nullable originalURL;
@property (nonatomic, readonly, copy) NSString * _Nullable sequenceId;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable vodItemId;
@property (nonatomic, readonly, strong) id <ZPCategoryProtocol> _Nullable showCategory;
@property (nonatomic, strong) NSString * _Nullable localNotificationSound;
@property (nonatomic, copy) NSDate * _Nullable startsAt;
@property (nonatomic, copy) NSDate * _Nullable endsAt;
@property (nonatomic, readonly) BOOL isLive;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, getter=isLocalNotificationScheduled) BOOL localNotificationScheduled;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (BOOL)didEnd SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalNotification;
- (void)removeLocalNotification;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomProgramEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomVideoEntry")
@interface APAtomVideoEntry : APAtomEntry
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
- (void)loadContentUrlWithCompletion:(void (^ _Nonnull)(void))completion;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APBannerModel")
@interface APBannerModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeStandardBanner;)
+ (NSString * _Nonnull)uibuilderTypeStandardBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeSmartBanner;)
+ (NSString * _Nonnull)uibuilderTypeSmartBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeBoxBanner;)
+ (NSString * _Nonnull)uibuilderTypeBoxBanner SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable object;
@property (nonatomic) NSInteger section;
@property (nonatomic) NSInteger row;
- (nonnull instancetype)initWithObject:(NSDictionary<NSString *, id> * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)adUnitID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)adProvider SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14ApplicasterSDK21APDataSourceJSManager")
@interface APDataSourceJSManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK28APDataSourceJSResponseObject")
@interface APDataSourceJSResponseObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ZPPurchasableItemProtocol;

/// This class is an helper class for easy integration of the storefront into any place in the app.
/// All you have to do in order to show the storefront to the user, is invoke the <code>attemptToPurchasePurchasableItem</code> method.
/// In order to receive delegation of the process’ results, you may register a delegate.
SWIFT_CLASS("_TtC14ApplicasterSDK26APDefaultStoreFrontHandler")
@interface APDefaultStoreFrontHandler : NSObject <ZPDefaultStoreFrontHandlerProtocol>
/// Call this method in order to start the purchase process. Make sure to set the delegate if there is one
/// before calling this method.
- (void)attemptToPurchasePurchasableItem:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for expirable items.
SWIFT_PROTOCOL("_TtP14ApplicasterSDK11APExpirable_")
@protocol APExpirable
/// This method returns the expiration date. If return balue is nil - it will not be considered as an expirable.
- (NSDate * _Nullable)expiresAt SWIFT_WARN_UNUSED_RESULT;
@end

@protocol APJavaScriptListenerDelegate;
@class WKWebView;

SWIFT_CLASS("_TtC14ApplicasterSDK20APJavaScriptListener")
@interface APJavaScriptListener : NSObject
@property (nonatomic, strong) id <APJavaScriptListenerDelegate> _Nullable delegate;
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme webview:(WKWebView * _Nonnull)webview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKNavigationAction;
@class WKNavigation;

@interface APJavaScriptListener (SWIFT_EXTENSION(ApplicasterSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK28APJavaScriptListenerDelegate_")
@protocol APJavaScriptListenerDelegate <NSObject>
- (void)handleJavaScriptCallWithCommand:(NSString * _Nullable)command dictionary:(NSDictionary * _Nullable)dictionary;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK7APLabel")
@interface APLabel : UILabel
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSCoding;

/// Safe box protocol to allow saving key, values (string or NSCoding), it could be implemented to safe in plist, Keychain etc…
SWIFT_PROTOCOL("_TtP14ApplicasterSDK10APLockable_")
@protocol APLockable
/// Returns a string value for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given key, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param key The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns an object that conforms to NSCoding for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The decoded object associated with the key if it exists. If no data exists, or the data found cannot be decoded, returns nil.
- (id <NSCoding> _Nullable)getObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save an NSCoding compliant object to the keychain associated with a specified key. If an object already exists for the given key, the object will be overwritten with the new value.
/// \param value The NSCoding compliant object to save.
///
/// \param key The key to save the object under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setObject:(id <NSCoding> _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove an object or string associated with a specified key.
/// \param key The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Empty the safe container from all data, useful for testing
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeAllKeys SWIFT_WARN_UNUSED_RESULT;
@end


/// This class can be used to map dictionary based object into native models.
/// Useful when receiving it from a server or a file
SWIFT_CLASS("_TtC14ApplicasterSDK13APModelMapper")
@interface APModelMapper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APModelMapper * _Nonnull sharedInstance;)
+ (APModelMapper * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC14ApplicasterSDK16APNetworkManager")
@interface APNetworkManager : NSObject
+ (NSString * _Nonnull)httpMethodGET SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPOST SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPATCH SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPUT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodDELETE SWIFT_WARN_UNUSED_RESULT;
+ (void)checkURLResponseForUrl:(NSURL * _Nullable)url completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestDataObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger, NSString * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestDataObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVPictureInPictureController;

SWIFT_CLASS("_TtC14ApplicasterSDK25APPictureInPictureManager")
@interface APPictureInPictureManager : NSObject <AVPictureInPictureControllerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APPictureInPictureManager * _Nonnull sharedInstance;)
+ (APPictureInPictureManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enable picture in picture mode
- (void)toggle;
- (void)dismiss;
/// check if picture in picture is active
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotDefinedForCurrentPlayer SWIFT_WARN_UNUSED_RESULT;
/// check if picture in picture is supported
- (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@class AVPlayerLayer;

SWIFT_PROTOCOL("_TtP14ApplicasterSDK26APPictureInPictureProtocol_")
@protocol APPictureInPictureProtocol
/// Do needed preparations to the player prior to restoring pIp mode
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
/// Checks if the player view controller is currently presented modally
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Present player view controller modally
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
/// Dismiss modally presented player view controller
- (void)dismissPlayerViewController;
/// Gets current player layer
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC14ApplicasterSDK20APPlugablePlayerBase")
@interface APPlugablePlayerBase : NSObject
@property (nonatomic, strong) NSDictionary * _Nullable configurationJSON;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK24APPlugablePlayerAVPlayer")
@interface APPlugablePlayerAVPlayer : APPlugablePlayerBase
@property (nonatomic) BOOL isPlayingInPictureInPictureMode;
- (BOOL)isPlayingAudioOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (BOOL)playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart:(AVPlayerViewController * _Nonnull)playerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end

@protocol ZPPlayable;
@protocol ZPPlayerProtocol;
@class UIViewController;
@class ZPPlayerConfiguration;

@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@end



@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <APPictureInPictureProtocol>
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIView;

@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <ZPPlayable>> * _Nullable)pluggablePlayerPlayableItems SWIFT_WARN_UNUSED_RESULT;
/// Default implementation is to present view controller animated.
/// You can override this behaviour in your subclass if different.
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
/// Default implementation is to add the view controller as a child full size to the container.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPlay:(NSArray<id <ZPPlayable>> * _Nullable)items configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK23APPlugablePlayerDefault")
@interface APPlugablePlayerDefault : APPlugablePlayerBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container configuration:(ZPPlayerConfiguration * _Nullable)configuration;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)setOnHoldWithIsOnHold:(BOOL)isOnHold;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerCanHandleSubscription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shareButtonEnabled SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIImage;
@protocol APPreloadViewControllerDelegate;

SWIFT_CLASS("_TtC14ApplicasterSDK23APPreloadViewController")
@interface APPreloadViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIImage * _Nullable splashImage;
@property (nonatomic) enum ZPPreloadURLType preloadType;
@property (nonatomic, strong) id <APPreloadViewControllerDelegate> _Nullable delegate;
@property (nonatomic) UIInterfaceOrientationMask allowedInterfaceOrientations;
@property (nonatomic) UIInterfaceOrientation initialInterfaceOrientation;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nullable instancetype)initWithPreloadType:(enum ZPPreloadURLType)preloadType url:(NSURL * _Nullable)url exposureTime:(NSTimeInterval)exposureTime;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK31APPreloadViewControllerDelegate_")
@protocol APPreloadViewControllerDelegate <NSObject>
@optional
- (void)preloadViewDidDisappear:(APPreloadViewController * _Nonnull)preloadViewController;
@required
- (void)preloadViewControllerFinished:(APPreloadViewController * _Nonnull)preloadViewController;
@end

@class AVURLAsset;

@interface APQueuePlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (void)getReadyForUrlAsset:(AVURLAsset * _Nonnull)urlAsset completion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APShadowView")
@interface APShadowView : UIImageView
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK17APStoreFrontUtils")
@interface APStoreFrontUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APSwiftUtils")
@interface APSwiftUtils : NSObject
/// This method returns the idfa for this device. This is the advertising it. Nil if don’t have one.
+ (NSString * _Nullable)identifierForAdvertising SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APUUIDManager")
@interface APUUIDManager : NSObject
/// The unique identifier for this user.
/// The unique identifier if one has been generated. <code>nil</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceID;)
+ (NSString * _Nonnull)deviceID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC14ApplicasterSDK17ApplicasterMember")
@interface ApplicasterMember : NSObject
+ (BOOL)isApplicasterMember SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isShowAnalyticUtilityAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK25AudioPlayerViewController")
@interface AudioPlayerViewController : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AudioPlayerViewController (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerSeekToSeconds:(NSTimeInterval)seconds;
- (void)pluggablePlayerSeekByDelta:(NSTimeInterval)delta;
- (void)pluggablePlayerMoveBackward;
- (void)pluggablePlayerMoveForward;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackPosition SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackDuration SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, JSDataSourceEnv, closed) {
  JSDataSourceEnvProduction = 0,
  JSDataSourceEnvCustomUrl = 1,
  JSDataSourceEnvLocal = 2,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
@import ZappPlugins;
#endif

#import <ApplicasterSDK/ApplicasterSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ApplicasterSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14ApplicasterSDK24APAVPlayerViewController")
@interface APAVPlayerViewController : AVPlayerViewController
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APApplicasterController (SWIFT_EXTENSION(ApplicasterSDK))
- (void)startActivitiesListener;
- (void)pauseActivitiesListener;
- (void)resumeActivitiesListener;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomChannelEntry")
@interface APAtomChannelEntry : APAtomEntry <APChannelProtocol>
@property (nonatomic) BOOL playOnLoad;
@property (nonatomic) BOOL needsPurchaseCheck;
@property (nonatomic, readonly, copy) NSString * _Nullable streamURL;
@property (nonatomic, readonly, copy) NSString * _Nullable splashURL;
@property (nonatomic, readonly, copy) NSString * _Nullable prerollURL;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable epgURL;
@property (nonatomic, readonly, copy) NSString * _Nullable nowPlaying;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImageURL;
@property (nonatomic) BOOL shouldSkipAds;
@property (nonatomic) BOOL shouldClosePlayerOnChannelSwitching;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomChannelEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK29APAtomEntryExtensionsProtocol_")
@protocol APAtomEntryExtensionsProtocol
@optional
@property (nonatomic, readonly) BOOL isFree;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


@interface APAtomEntryPlayable (SWIFT_EXTENSION(ApplicasterSDK))
- (void)loadVodItemWithProvider:(NSString * _Nonnull)provider accountId:(NSString * _Nonnull)accountId broadcasterId:(NSString * _Nonnull)broadcasterId itemId:(NSString * _Nonnull)itemId signature:(NSString * _Nonnull)signature completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)loadAtomEntryContentUrl:(void (^ _Nonnull)(NSString * _Nullable))completion;
@end

@class APAtomFeed;

SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomFeedLoader")
@interface APAtomFeedLoader : NSObject
+ (void)loadWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APAtomFeedLoader (SWIFT_EXTENSION(ApplicasterSDK))
+ (void)loadPipesWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
@end

@protocol APAtomEntryProtocol;

SWIFT_CLASS("_TtC14ApplicasterSDK17APAtomPipesParser")
@interface APAtomPipesParser : NSObject
+ (id _Nullable)parseWithModel:(id <APAtomEntryProtocol> _Nullable)model parentModel:(id <APAtomEntryProtocol> _Nullable)parentModel data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (id <APAtomEntryProtocol> _Nonnull)populateEntryWithModel:(id <APAtomEntryProtocol> _Nonnull)model data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDate:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDateWithDateString:(NSString * _Nullable)dateString localeString:(NSString * _Nullable)localeString dateFormatterString:(NSString * _Nullable)dateFormatterString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZPCategoryProtocol;
@class NSString;

SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomProgramEntry")
@interface APAtomProgramEntry : APAtomEntry <APProgramProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable programDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable liveImageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable thumbURL;
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable mediumURL;
@property (nonatomic, readonly, copy) NSString * _Nullable originalURL;
@property (nonatomic, readonly, copy) NSString * _Nullable sequenceId;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable vodItemId;
@property (nonatomic, readonly, strong) id <ZPCategoryProtocol> _Nullable showCategory;
@property (nonatomic, strong) NSString * _Nullable localNotificationSound;
@property (nonatomic, copy) NSDate * _Nullable startsAt;
@property (nonatomic, copy) NSDate * _Nullable endsAt;
@property (nonatomic, readonly) BOOL isLive;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, getter=isLocalNotificationScheduled) BOOL localNotificationScheduled;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (BOOL)didEnd SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalNotification;
- (void)removeLocalNotification;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomProgramEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomVideoEntry")
@interface APAtomVideoEntry : APAtomEntry
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
- (void)loadContentUrlWithCompletion:(void (^ _Nonnull)(void))completion;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APBannerModel")
@interface APBannerModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeStandardBanner;)
+ (NSString * _Nonnull)uibuilderTypeStandardBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeSmartBanner;)
+ (NSString * _Nonnull)uibuilderTypeSmartBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeBoxBanner;)
+ (NSString * _Nonnull)uibuilderTypeBoxBanner SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable object;
@property (nonatomic) NSInteger section;
@property (nonatomic) NSInteger row;
- (nonnull instancetype)initWithObject:(NSDictionary<NSString *, id> * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)adUnitID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)adProvider SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14ApplicasterSDK21APDataSourceJSManager")
@interface APDataSourceJSManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK28APDataSourceJSResponseObject")
@interface APDataSourceJSResponseObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ZPPurchasableItemProtocol;

/// This class is an helper class for easy integration of the storefront into any place in the app.
/// All you have to do in order to show the storefront to the user, is invoke the <code>attemptToPurchasePurchasableItem</code> method.
/// In order to receive delegation of the process’ results, you may register a delegate.
SWIFT_CLASS("_TtC14ApplicasterSDK26APDefaultStoreFrontHandler")
@interface APDefaultStoreFrontHandler : NSObject <ZPDefaultStoreFrontHandlerProtocol>
/// Call this method in order to start the purchase process. Make sure to set the delegate if there is one
/// before calling this method.
- (void)attemptToPurchasePurchasableItem:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for expirable items.
SWIFT_PROTOCOL("_TtP14ApplicasterSDK11APExpirable_")
@protocol APExpirable
/// This method returns the expiration date. If return balue is nil - it will not be considered as an expirable.
- (NSDate * _Nullable)expiresAt SWIFT_WARN_UNUSED_RESULT;
@end

@protocol APJavaScriptListenerDelegate;
@class WKWebView;

SWIFT_CLASS("_TtC14ApplicasterSDK20APJavaScriptListener")
@interface APJavaScriptListener : NSObject
@property (nonatomic, strong) id <APJavaScriptListenerDelegate> _Nullable delegate;
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme webview:(WKWebView * _Nonnull)webview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKNavigationAction;
@class WKNavigation;

@interface APJavaScriptListener (SWIFT_EXTENSION(ApplicasterSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK28APJavaScriptListenerDelegate_")
@protocol APJavaScriptListenerDelegate <NSObject>
- (void)handleJavaScriptCallWithCommand:(NSString * _Nullable)command dictionary:(NSDictionary * _Nullable)dictionary;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK7APLabel")
@interface APLabel : UILabel
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSCoding;

/// Safe box protocol to allow saving key, values (string or NSCoding), it could be implemented to safe in plist, Keychain etc…
SWIFT_PROTOCOL("_TtP14ApplicasterSDK10APLockable_")
@protocol APLockable
/// Returns a string value for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given key, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param key The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns an object that conforms to NSCoding for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The decoded object associated with the key if it exists. If no data exists, or the data found cannot be decoded, returns nil.
- (id <NSCoding> _Nullable)getObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save an NSCoding compliant object to the keychain associated with a specified key. If an object already exists for the given key, the object will be overwritten with the new value.
/// \param value The NSCoding compliant object to save.
///
/// \param key The key to save the object under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setObject:(id <NSCoding> _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove an object or string associated with a specified key.
/// \param key The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Empty the safe container from all data, useful for testing
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeAllKeys SWIFT_WARN_UNUSED_RESULT;
@end


/// This class can be used to map dictionary based object into native models.
/// Useful when receiving it from a server or a file
SWIFT_CLASS("_TtC14ApplicasterSDK13APModelMapper")
@interface APModelMapper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APModelMapper * _Nonnull sharedInstance;)
+ (APModelMapper * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC14ApplicasterSDK16APNetworkManager")
@interface APNetworkManager : NSObject
+ (NSString * _Nonnull)httpMethodGET SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPOST SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPATCH SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPUT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodDELETE SWIFT_WARN_UNUSED_RESULT;
+ (void)checkURLResponseForUrl:(NSURL * _Nullable)url completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestDataObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger, NSString * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestDataObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVPictureInPictureController;

SWIFT_CLASS("_TtC14ApplicasterSDK25APPictureInPictureManager")
@interface APPictureInPictureManager : NSObject <AVPictureInPictureControllerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APPictureInPictureManager * _Nonnull sharedInstance;)
+ (APPictureInPictureManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enable picture in picture mode
- (void)toggle;
- (void)dismiss;
/// check if picture in picture is active
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotDefinedForCurrentPlayer SWIFT_WARN_UNUSED_RESULT;
/// check if picture in picture is supported
- (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@class AVPlayerLayer;

SWIFT_PROTOCOL("_TtP14ApplicasterSDK26APPictureInPictureProtocol_")
@protocol APPictureInPictureProtocol
/// Do needed preparations to the player prior to restoring pIp mode
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
/// Checks if the player view controller is currently presented modally
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Present player view controller modally
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
/// Dismiss modally presented player view controller
- (void)dismissPlayerViewController;
/// Gets current player layer
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC14ApplicasterSDK20APPlugablePlayerBase")
@interface APPlugablePlayerBase : NSObject
@property (nonatomic, strong) NSDictionary * _Nullable configurationJSON;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK24APPlugablePlayerAVPlayer")
@interface APPlugablePlayerAVPlayer : APPlugablePlayerBase
@property (nonatomic) BOOL isPlayingInPictureInPictureMode;
- (BOOL)isPlayingAudioOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (BOOL)playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart:(AVPlayerViewController * _Nonnull)playerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end

@protocol ZPPlayable;
@protocol ZPPlayerProtocol;
@class UIViewController;
@class ZPPlayerConfiguration;

@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@end



@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <APPictureInPictureProtocol>
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIView;

@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <ZPPlayable>> * _Nullable)pluggablePlayerPlayableItems SWIFT_WARN_UNUSED_RESULT;
/// Default implementation is to present view controller animated.
/// You can override this behaviour in your subclass if different.
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
/// Default implementation is to add the view controller as a child full size to the container.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPlay:(NSArray<id <ZPPlayable>> * _Nullable)items configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK23APPlugablePlayerDefault")
@interface APPlugablePlayerDefault : APPlugablePlayerBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container configuration:(ZPPlayerConfiguration * _Nullable)configuration;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)setOnHoldWithIsOnHold:(BOOL)isOnHold;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerCanHandleSubscription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shareButtonEnabled SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIImage;
@protocol APPreloadViewControllerDelegate;

SWIFT_CLASS("_TtC14ApplicasterSDK23APPreloadViewController")
@interface APPreloadViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIImage * _Nullable splashImage;
@property (nonatomic) enum ZPPreloadURLType preloadType;
@property (nonatomic, strong) id <APPreloadViewControllerDelegate> _Nullable delegate;
@property (nonatomic) UIInterfaceOrientationMask allowedInterfaceOrientations;
@property (nonatomic) UIInterfaceOrientation initialInterfaceOrientation;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nullable instancetype)initWithPreloadType:(enum ZPPreloadURLType)preloadType url:(NSURL * _Nullable)url exposureTime:(NSTimeInterval)exposureTime;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK31APPreloadViewControllerDelegate_")
@protocol APPreloadViewControllerDelegate <NSObject>
@optional
- (void)preloadViewDidDisappear:(APPreloadViewController * _Nonnull)preloadViewController;
@required
- (void)preloadViewControllerFinished:(APPreloadViewController * _Nonnull)preloadViewController;
@end

@class AVURLAsset;

@interface APQueuePlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (void)getReadyForUrlAsset:(AVURLAsset * _Nonnull)urlAsset completion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APShadowView")
@interface APShadowView : UIImageView
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK17APStoreFrontUtils")
@interface APStoreFrontUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APSwiftUtils")
@interface APSwiftUtils : NSObject
/// This method returns the idfa for this device. This is the advertising it. Nil if don’t have one.
+ (NSString * _Nullable)identifierForAdvertising SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APUUIDManager")
@interface APUUIDManager : NSObject
/// The unique identifier for this user.
/// The unique identifier if one has been generated. <code>nil</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceID;)
+ (NSString * _Nonnull)deviceID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC14ApplicasterSDK17ApplicasterMember")
@interface ApplicasterMember : NSObject
+ (BOOL)isApplicasterMember SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isShowAnalyticUtilityAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK25AudioPlayerViewController")
@interface AudioPlayerViewController : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AudioPlayerViewController (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerSeekToSeconds:(NSTimeInterval)seconds;
- (void)pluggablePlayerSeekByDelta:(NSTimeInterval)delta;
- (void)pluggablePlayerMoveBackward;
- (void)pluggablePlayerMoveForward;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackPosition SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackDuration SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, JSDataSourceEnv, closed) {
  JSDataSourceEnvProduction = 0,
  JSDataSourceEnvCustomUrl = 1,
  JSDataSourceEnvLocal = 2,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
//Start of iphoneos
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
@import ZappPlugins;
#endif

#import <ApplicasterSDK/ApplicasterSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ApplicasterSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14ApplicasterSDK24APAVPlayerViewController")
@interface APAVPlayerViewController : AVPlayerViewController
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APApplicasterController (SWIFT_EXTENSION(ApplicasterSDK))
- (void)startActivitiesListener;
- (void)pauseActivitiesListener;
- (void)resumeActivitiesListener;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomChannelEntry")
@interface APAtomChannelEntry : APAtomEntry <APChannelProtocol>
@property (nonatomic) BOOL playOnLoad;
@property (nonatomic) BOOL needsPurchaseCheck;
@property (nonatomic, readonly, copy) NSString * _Nullable streamURL;
@property (nonatomic, readonly, copy) NSString * _Nullable splashURL;
@property (nonatomic, readonly, copy) NSString * _Nullable prerollURL;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable epgURL;
@property (nonatomic, readonly, copy) NSString * _Nullable nowPlaying;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImageURL;
@property (nonatomic) BOOL shouldSkipAds;
@property (nonatomic) BOOL shouldClosePlayerOnChannelSwitching;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomChannelEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK29APAtomEntryExtensionsProtocol_")
@protocol APAtomEntryExtensionsProtocol
@optional
@property (nonatomic, readonly) BOOL isFree;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


@interface APAtomEntryPlayable (SWIFT_EXTENSION(ApplicasterSDK))
- (void)loadVodItemWithProvider:(NSString * _Nonnull)provider accountId:(NSString * _Nonnull)accountId broadcasterId:(NSString * _Nonnull)broadcasterId itemId:(NSString * _Nonnull)itemId signature:(NSString * _Nonnull)signature completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)loadAtomEntryContentUrl:(void (^ _Nonnull)(NSString * _Nullable))completion;
@end

@class APAtomFeed;

SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomFeedLoader")
@interface APAtomFeedLoader : NSObject
+ (void)loadWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APAtomFeedLoader (SWIFT_EXTENSION(ApplicasterSDK))
+ (void)loadPipesWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
@end

@protocol APAtomEntryProtocol;

SWIFT_CLASS("_TtC14ApplicasterSDK17APAtomPipesParser")
@interface APAtomPipesParser : NSObject
+ (id _Nullable)parseWithModel:(id <APAtomEntryProtocol> _Nullable)model parentModel:(id <APAtomEntryProtocol> _Nullable)parentModel data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (id <APAtomEntryProtocol> _Nonnull)populateEntryWithModel:(id <APAtomEntryProtocol> _Nonnull)model data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDate:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDateWithDateString:(NSString * _Nullable)dateString localeString:(NSString * _Nullable)localeString dateFormatterString:(NSString * _Nullable)dateFormatterString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZPCategoryProtocol;
@class NSString;

SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomProgramEntry")
@interface APAtomProgramEntry : APAtomEntry <APProgramProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable programDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable liveImageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable thumbURL;
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable mediumURL;
@property (nonatomic, readonly, copy) NSString * _Nullable originalURL;
@property (nonatomic, readonly, copy) NSString * _Nullable sequenceId;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable vodItemId;
@property (nonatomic, readonly, strong) id <ZPCategoryProtocol> _Nullable showCategory;
@property (nonatomic, strong) NSString * _Nullable localNotificationSound;
@property (nonatomic, copy) NSDate * _Nullable startsAt;
@property (nonatomic, copy) NSDate * _Nullable endsAt;
@property (nonatomic, readonly) BOOL isLive;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, getter=isLocalNotificationScheduled) BOOL localNotificationScheduled;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (BOOL)didEnd SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalNotification;
- (void)removeLocalNotification;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomProgramEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomVideoEntry")
@interface APAtomVideoEntry : APAtomEntry
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
- (void)loadContentUrlWithCompletion:(void (^ _Nonnull)(void))completion;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APBannerModel")
@interface APBannerModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeStandardBanner;)
+ (NSString * _Nonnull)uibuilderTypeStandardBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeSmartBanner;)
+ (NSString * _Nonnull)uibuilderTypeSmartBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeBoxBanner;)
+ (NSString * _Nonnull)uibuilderTypeBoxBanner SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable object;
@property (nonatomic) NSInteger section;
@property (nonatomic) NSInteger row;
- (nonnull instancetype)initWithObject:(NSDictionary<NSString *, id> * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)adUnitID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)adProvider SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14ApplicasterSDK21APDataSourceJSManager")
@interface APDataSourceJSManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK28APDataSourceJSResponseObject")
@interface APDataSourceJSResponseObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ZPPurchasableItemProtocol;

/// This class is an helper class for easy integration of the storefront into any place in the app.
/// All you have to do in order to show the storefront to the user, is invoke the <code>attemptToPurchasePurchasableItem</code> method.
/// In order to receive delegation of the process’ results, you may register a delegate.
SWIFT_CLASS("_TtC14ApplicasterSDK26APDefaultStoreFrontHandler")
@interface APDefaultStoreFrontHandler : NSObject <ZPDefaultStoreFrontHandlerProtocol>
/// Call this method in order to start the purchase process. Make sure to set the delegate if there is one
/// before calling this method.
- (void)attemptToPurchasePurchasableItem:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for expirable items.
SWIFT_PROTOCOL("_TtP14ApplicasterSDK11APExpirable_")
@protocol APExpirable
/// This method returns the expiration date. If return balue is nil - it will not be considered as an expirable.
- (NSDate * _Nullable)expiresAt SWIFT_WARN_UNUSED_RESULT;
@end

@protocol APJavaScriptListenerDelegate;
@class WKWebView;

SWIFT_CLASS("_TtC14ApplicasterSDK20APJavaScriptListener")
@interface APJavaScriptListener : NSObject
@property (nonatomic, strong) id <APJavaScriptListenerDelegate> _Nullable delegate;
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme webview:(WKWebView * _Nonnull)webview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKNavigationAction;
@class WKNavigation;

@interface APJavaScriptListener (SWIFT_EXTENSION(ApplicasterSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK28APJavaScriptListenerDelegate_")
@protocol APJavaScriptListenerDelegate <NSObject>
- (void)handleJavaScriptCallWithCommand:(NSString * _Nullable)command dictionary:(NSDictionary * _Nullable)dictionary;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK7APLabel")
@interface APLabel : UILabel
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSCoding;

/// Safe box protocol to allow saving key, values (string or NSCoding), it could be implemented to safe in plist, Keychain etc…
SWIFT_PROTOCOL("_TtP14ApplicasterSDK10APLockable_")
@protocol APLockable
/// Returns a string value for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given key, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param key The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns an object that conforms to NSCoding for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The decoded object associated with the key if it exists. If no data exists, or the data found cannot be decoded, returns nil.
- (id <NSCoding> _Nullable)getObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save an NSCoding compliant object to the keychain associated with a specified key. If an object already exists for the given key, the object will be overwritten with the new value.
/// \param value The NSCoding compliant object to save.
///
/// \param key The key to save the object under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setObject:(id <NSCoding> _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove an object or string associated with a specified key.
/// \param key The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Empty the safe container from all data, useful for testing
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeAllKeys SWIFT_WARN_UNUSED_RESULT;
@end


/// This class can be used to map dictionary based object into native models.
/// Useful when receiving it from a server or a file
SWIFT_CLASS("_TtC14ApplicasterSDK13APModelMapper")
@interface APModelMapper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APModelMapper * _Nonnull sharedInstance;)
+ (APModelMapper * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC14ApplicasterSDK16APNetworkManager")
@interface APNetworkManager : NSObject
+ (NSString * _Nonnull)httpMethodGET SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPOST SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPATCH SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPUT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodDELETE SWIFT_WARN_UNUSED_RESULT;
+ (void)checkURLResponseForUrl:(NSURL * _Nullable)url completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestDataObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger, NSString * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestDataObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVPictureInPictureController;

SWIFT_CLASS("_TtC14ApplicasterSDK25APPictureInPictureManager")
@interface APPictureInPictureManager : NSObject <AVPictureInPictureControllerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APPictureInPictureManager * _Nonnull sharedInstance;)
+ (APPictureInPictureManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enable picture in picture mode
- (void)toggle;
- (void)dismiss;
/// check if picture in picture is active
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotDefinedForCurrentPlayer SWIFT_WARN_UNUSED_RESULT;
/// check if picture in picture is supported
- (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@class AVPlayerLayer;

SWIFT_PROTOCOL("_TtP14ApplicasterSDK26APPictureInPictureProtocol_")
@protocol APPictureInPictureProtocol
/// Do needed preparations to the player prior to restoring pIp mode
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
/// Checks if the player view controller is currently presented modally
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Present player view controller modally
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
/// Dismiss modally presented player view controller
- (void)dismissPlayerViewController;
/// Gets current player layer
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC14ApplicasterSDK20APPlugablePlayerBase")
@interface APPlugablePlayerBase : NSObject
@property (nonatomic, strong) NSDictionary * _Nullable configurationJSON;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK24APPlugablePlayerAVPlayer")
@interface APPlugablePlayerAVPlayer : APPlugablePlayerBase
@property (nonatomic) BOOL isPlayingInPictureInPictureMode;
- (BOOL)isPlayingAudioOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (BOOL)playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart:(AVPlayerViewController * _Nonnull)playerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end

@protocol ZPPlayable;
@protocol ZPPlayerProtocol;
@class UIViewController;
@class ZPPlayerConfiguration;

@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@end



@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <APPictureInPictureProtocol>
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIView;

@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <ZPPlayable>> * _Nullable)pluggablePlayerPlayableItems SWIFT_WARN_UNUSED_RESULT;
/// Default implementation is to present view controller animated.
/// You can override this behaviour in your subclass if different.
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
/// Default implementation is to add the view controller as a child full size to the container.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPlay:(NSArray<id <ZPPlayable>> * _Nullable)items configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK23APPlugablePlayerDefault")
@interface APPlugablePlayerDefault : APPlugablePlayerBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container configuration:(ZPPlayerConfiguration * _Nullable)configuration;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)setOnHoldWithIsOnHold:(BOOL)isOnHold;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerCanHandleSubscription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shareButtonEnabled SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIImage;
@protocol APPreloadViewControllerDelegate;

SWIFT_CLASS("_TtC14ApplicasterSDK23APPreloadViewController")
@interface APPreloadViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIImage * _Nullable splashImage;
@property (nonatomic) enum ZPPreloadURLType preloadType;
@property (nonatomic, strong) id <APPreloadViewControllerDelegate> _Nullable delegate;
@property (nonatomic) UIInterfaceOrientationMask allowedInterfaceOrientations;
@property (nonatomic) UIInterfaceOrientation initialInterfaceOrientation;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nullable instancetype)initWithPreloadType:(enum ZPPreloadURLType)preloadType url:(NSURL * _Nullable)url exposureTime:(NSTimeInterval)exposureTime;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK31APPreloadViewControllerDelegate_")
@protocol APPreloadViewControllerDelegate <NSObject>
@optional
- (void)preloadViewDidDisappear:(APPreloadViewController * _Nonnull)preloadViewController;
@required
- (void)preloadViewControllerFinished:(APPreloadViewController * _Nonnull)preloadViewController;
@end

@class AVURLAsset;

@interface APQueuePlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (void)getReadyForUrlAsset:(AVURLAsset * _Nonnull)urlAsset completion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APShadowView")
@interface APShadowView : UIImageView
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK17APStoreFrontUtils")
@interface APStoreFrontUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APSwiftUtils")
@interface APSwiftUtils : NSObject
/// This method returns the idfa for this device. This is the advertising it. Nil if don’t have one.
+ (NSString * _Nullable)identifierForAdvertising SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APUUIDManager")
@interface APUUIDManager : NSObject
/// The unique identifier for this user.
/// The unique identifier if one has been generated. <code>nil</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceID;)
+ (NSString * _Nonnull)deviceID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC14ApplicasterSDK17ApplicasterMember")
@interface ApplicasterMember : NSObject
+ (BOOL)isApplicasterMember SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isShowAnalyticUtilityAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK25AudioPlayerViewController")
@interface AudioPlayerViewController : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AudioPlayerViewController (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerSeekToSeconds:(NSTimeInterval)seconds;
- (void)pluggablePlayerSeekByDelta:(NSTimeInterval)delta;
- (void)pluggablePlayerMoveBackward;
- (void)pluggablePlayerMoveForward;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackPosition SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackDuration SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, JSDataSourceEnv, closed) {
  JSDataSourceEnvProduction = 0,
  JSDataSourceEnvCustomUrl = 1,
  JSDataSourceEnvLocal = 2,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
@import ZappPlugins;
#endif

#import <ApplicasterSDK/ApplicasterSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ApplicasterSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14ApplicasterSDK24APAVPlayerViewController")
@interface APAVPlayerViewController : AVPlayerViewController
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APApplicasterController (SWIFT_EXTENSION(ApplicasterSDK))
- (void)startActivitiesListener;
- (void)pauseActivitiesListener;
- (void)resumeActivitiesListener;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomChannelEntry")
@interface APAtomChannelEntry : APAtomEntry <APChannelProtocol>
@property (nonatomic) BOOL playOnLoad;
@property (nonatomic) BOOL needsPurchaseCheck;
@property (nonatomic, readonly, copy) NSString * _Nullable streamURL;
@property (nonatomic, readonly, copy) NSString * _Nullable splashURL;
@property (nonatomic, readonly, copy) NSString * _Nullable prerollURL;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable epgURL;
@property (nonatomic, readonly, copy) NSString * _Nullable nowPlaying;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImageURL;
@property (nonatomic) BOOL shouldSkipAds;
@property (nonatomic) BOOL shouldClosePlayerOnChannelSwitching;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomChannelEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK29APAtomEntryExtensionsProtocol_")
@protocol APAtomEntryExtensionsProtocol
@optional
@property (nonatomic, readonly) BOOL isFree;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


@interface APAtomEntryPlayable (SWIFT_EXTENSION(ApplicasterSDK))
- (void)loadVodItemWithProvider:(NSString * _Nonnull)provider accountId:(NSString * _Nonnull)accountId broadcasterId:(NSString * _Nonnull)broadcasterId itemId:(NSString * _Nonnull)itemId signature:(NSString * _Nonnull)signature completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)loadAtomEntryContentUrl:(void (^ _Nonnull)(NSString * _Nullable))completion;
@end

@class APAtomFeed;

SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomFeedLoader")
@interface APAtomFeedLoader : NSObject
+ (void)loadWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APAtomFeedLoader (SWIFT_EXTENSION(ApplicasterSDK))
+ (void)loadPipesWithModel:(APAtomFeed * _Nonnull)model shouldInvalidateCache:(BOOL)shouldInvalidateCache completion:(void (^ _Nonnull)(BOOL, APAtomFeed * _Nullable))completion;
@end

@protocol APAtomEntryProtocol;

SWIFT_CLASS("_TtC14ApplicasterSDK17APAtomPipesParser")
@interface APAtomPipesParser : NSObject
+ (id _Nullable)parseWithModel:(id <APAtomEntryProtocol> _Nullable)model parentModel:(id <APAtomEntryProtocol> _Nullable)parentModel data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (id <APAtomEntryProtocol> _Nonnull)populateEntryWithModel:(id <APAtomEntryProtocol> _Nonnull)model data:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDate:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)parseAtomDateWithDateString:(NSString * _Nullable)dateString localeString:(NSString * _Nullable)localeString dateFormatterString:(NSString * _Nullable)dateFormatterString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZPCategoryProtocol;
@class NSString;

SWIFT_CLASS("_TtC14ApplicasterSDK18APAtomProgramEntry")
@interface APAtomProgramEntry : APAtomEntry <APProgramProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable programDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable liveImageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable thumbURL;
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
@property (nonatomic, readonly, copy) NSString * _Nullable mediumURL;
@property (nonatomic, readonly, copy) NSString * _Nullable originalURL;
@property (nonatomic, readonly, copy) NSString * _Nullable sequenceId;
@property (nonatomic, readonly, copy) NSString * _Nullable channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable vodItemId;
@property (nonatomic, readonly, strong) id <ZPCategoryProtocol> _Nullable showCategory;
@property (nonatomic, strong) NSString * _Nullable localNotificationSound;
@property (nonatomic, copy) NSDate * _Nullable startsAt;
@property (nonatomic, copy) NSDate * _Nullable endsAt;
@property (nonatomic, readonly) BOOL isLive;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, getter=isLocalNotificationScheduled) BOOL localNotificationScheduled;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (BOOL)didEnd SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalNotification;
- (void)removeLocalNotification;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface APAtomProgramEntry (SWIFT_EXTENSION(ApplicasterSDK))
@property (nonatomic, readonly) BOOL allowedToBeFavorited;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK16APAtomVideoEntry")
@interface APAtomVideoEntry : APAtomEntry
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
- (void)loadContentUrlWithCompletion:(void (^ _Nonnull)(void))completion;
- (null_unspecified instancetype)initWithParams:(NSDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithPipesObject:(NSDictionary * _Null_unspecified)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APBannerModel")
@interface APBannerModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeStandardBanner;)
+ (NSString * _Nonnull)uibuilderTypeStandardBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeSmartBanner;)
+ (NSString * _Nonnull)uibuilderTypeSmartBanner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uibuilderTypeBoxBanner;)
+ (NSString * _Nonnull)uibuilderTypeBoxBanner SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable object;
@property (nonatomic) NSInteger section;
@property (nonatomic) NSInteger row;
- (nonnull instancetype)initWithObject:(NSDictionary<NSString *, id> * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)adUnitID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)adProvider SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14ApplicasterSDK21APDataSourceJSManager")
@interface APDataSourceJSManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK28APDataSourceJSResponseObject")
@interface APDataSourceJSResponseObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ZPPurchasableItemProtocol;

/// This class is an helper class for easy integration of the storefront into any place in the app.
/// All you have to do in order to show the storefront to the user, is invoke the <code>attemptToPurchasePurchasableItem</code> method.
/// In order to receive delegation of the process’ results, you may register a delegate.
SWIFT_CLASS("_TtC14ApplicasterSDK26APDefaultStoreFrontHandler")
@interface APDefaultStoreFrontHandler : NSObject <ZPDefaultStoreFrontHandlerProtocol>
/// Call this method in order to start the purchase process. Make sure to set the delegate if there is one
/// before calling this method.
- (void)attemptToPurchasePurchasableItem:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol for expirable items.
SWIFT_PROTOCOL("_TtP14ApplicasterSDK11APExpirable_")
@protocol APExpirable
/// This method returns the expiration date. If return balue is nil - it will not be considered as an expirable.
- (NSDate * _Nullable)expiresAt SWIFT_WARN_UNUSED_RESULT;
@end

@protocol APJavaScriptListenerDelegate;
@class WKWebView;

SWIFT_CLASS("_TtC14ApplicasterSDK20APJavaScriptListener")
@interface APJavaScriptListener : NSObject
@property (nonatomic, strong) id <APJavaScriptListenerDelegate> _Nullable delegate;
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scheme:(NSString * _Nonnull)scheme webview:(WKWebView * _Nonnull)webview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKNavigationAction;
@class WKNavigation;

@interface APJavaScriptListener (SWIFT_EXTENSION(ApplicasterSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK28APJavaScriptListenerDelegate_")
@protocol APJavaScriptListenerDelegate <NSObject>
- (void)handleJavaScriptCallWithCommand:(NSString * _Nullable)command dictionary:(NSDictionary * _Nullable)dictionary;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK7APLabel")
@interface APLabel : UILabel
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSCoding;

/// Safe box protocol to allow saving key, values (string or NSCoding), it could be implemented to safe in plist, Keychain etc…
SWIFT_PROTOCOL("_TtP14ApplicasterSDK10APLockable_")
@protocol APLockable
/// Returns a string value for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given key, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param key The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns an object that conforms to NSCoding for a specified key.
/// \param key The key to lookup data for.
///
///
/// returns:
/// The decoded object associated with the key if it exists. If no data exists, or the data found cannot be decoded, returns nil.
- (id <NSCoding> _Nullable)getObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Save an NSCoding compliant object to the keychain associated with a specified key. If an object already exists for the given key, the object will be overwritten with the new value.
/// \param value The NSCoding compliant object to save.
///
/// \param key The key to save the object under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
- (BOOL)setObject:(id <NSCoding> _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove an object or string associated with a specified key.
/// \param key The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Empty the safe container from all data, useful for testing
///
/// returns:
/// True if successful, false otherwise.
- (BOOL)removeAllKeys SWIFT_WARN_UNUSED_RESULT;
@end


/// This class can be used to map dictionary based object into native models.
/// Useful when receiving it from a server or a file
SWIFT_CLASS("_TtC14ApplicasterSDK13APModelMapper")
@interface APModelMapper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APModelMapper * _Nonnull sharedInstance;)
+ (APModelMapper * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC14ApplicasterSDK16APNetworkManager")
@interface APNetworkManager : NSObject
+ (NSString * _Nonnull)httpMethodGET SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPOST SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPATCH SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodPUT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)httpMethodDELETE SWIFT_WARN_UNUSED_RESULT;
+ (void)checkURLResponseForUrl:(NSURL * _Nullable)url completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
+ (void)requestDataObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger, NSString * _Nullable))completion;
+ (NSURLSessionTask * _Nullable)requestDataObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVPictureInPictureController;

SWIFT_CLASS("_TtC14ApplicasterSDK25APPictureInPictureManager")
@interface APPictureInPictureManager : NSObject <AVPictureInPictureControllerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APPictureInPictureManager * _Nonnull sharedInstance;)
+ (APPictureInPictureManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enable picture in picture mode
- (void)toggle;
- (void)dismiss;
/// check if picture in picture is active
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotDefinedForCurrentPlayer SWIFT_WARN_UNUSED_RESULT;
/// check if picture in picture is supported
- (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@class AVPlayerLayer;

SWIFT_PROTOCOL("_TtP14ApplicasterSDK26APPictureInPictureProtocol_")
@protocol APPictureInPictureProtocol
/// Do needed preparations to the player prior to restoring pIp mode
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
/// Checks if the player view controller is currently presented modally
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Present player view controller modally
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
/// Dismiss modally presented player view controller
- (void)dismissPlayerViewController;
/// Gets current player layer
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC14ApplicasterSDK20APPlugablePlayerBase")
@interface APPlugablePlayerBase : NSObject
@property (nonatomic, strong) NSDictionary * _Nullable configurationJSON;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK24APPlugablePlayerAVPlayer")
@interface APPlugablePlayerAVPlayer : APPlugablePlayerBase
@property (nonatomic) BOOL isPlayingInPictureInPictureMode;
- (BOOL)isPlayingAudioOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (BOOL)playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart:(AVPlayerViewController * _Nonnull)playerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end

@protocol ZPPlayable;
@protocol ZPPlayerProtocol;
@class UIViewController;
@class ZPPlayerConfiguration;

@interface APPlugablePlayerAVPlayer (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@end



@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <APPictureInPictureProtocol>
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
- (AVPlayerLayer * _Nullable)currentPlayerLayer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIView;

@interface APPlugablePlayerBase (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <ZPPlayable>> * _Nullable)pluggablePlayerPlayableItems SWIFT_WARN_UNUSED_RESULT;
/// Default implementation is to present view controller animated.
/// You can override this behaviour in your subclass if different.
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
/// Default implementation is to add the view controller as a child full size to the container.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPlay:(NSArray<id <ZPPlayable>> * _Nullable)items configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerResume;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK23APPlugablePlayerDefault")
@interface APPlugablePlayerDefault : APPlugablePlayerBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
- (void)prepareToPlayOnRestoringFromPictureInPictureMode;
- (BOOL)isPlayerViewControllerCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerViewController:(void (^ _Nullable)(void))completion;
- (void)dismissPlayerViewController;
@end


@interface APPlugablePlayerDefault (SWIFT_EXTENSION(ApplicasterSDK))
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container configuration:(ZPPlayerConfiguration * _Nullable)configuration;
/// Default implementation is to remove the view controller from it’s parent view controller.
/// You can override this behaviour in your subclass if different.
- (void)pluggablePlayerRemoveInline;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerResume;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (void)setOnHoldWithIsOnHold:(BOOL)isOnHold;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerCanHandleSubscription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shareButtonEnabled SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIImage;
@protocol APPreloadViewControllerDelegate;

SWIFT_CLASS("_TtC14ApplicasterSDK23APPreloadViewController")
@interface APPreloadViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIImage * _Nullable splashImage;
@property (nonatomic) enum ZPPreloadURLType preloadType;
@property (nonatomic, strong) id <APPreloadViewControllerDelegate> _Nullable delegate;
@property (nonatomic) UIInterfaceOrientationMask allowedInterfaceOrientations;
@property (nonatomic) UIInterfaceOrientation initialInterfaceOrientation;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nullable instancetype)initWithPreloadType:(enum ZPPreloadURLType)preloadType url:(NSURL * _Nullable)url exposureTime:(NSTimeInterval)exposureTime;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP14ApplicasterSDK31APPreloadViewControllerDelegate_")
@protocol APPreloadViewControllerDelegate <NSObject>
@optional
- (void)preloadViewDidDisappear:(APPreloadViewController * _Nonnull)preloadViewController;
@required
- (void)preloadViewControllerFinished:(APPreloadViewController * _Nonnull)preloadViewController;
@end

@class AVURLAsset;

@interface APQueuePlayer (SWIFT_EXTENSION(ApplicasterSDK))
- (void)getReadyForUrlAsset:(AVURLAsset * _Nonnull)urlAsset completion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APShadowView")
@interface APShadowView : UIImageView
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK17APStoreFrontUtils")
@interface APStoreFrontUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK12APSwiftUtils")
@interface APSwiftUtils : NSObject
/// This method returns the idfa for this device. This is the advertising it. Nil if don’t have one.
+ (NSString * _Nullable)identifierForAdvertising SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK13APUUIDManager")
@interface APUUIDManager : NSObject
/// The unique identifier for this user.
/// The unique identifier if one has been generated. <code>nil</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceID;)
+ (NSString * _Nonnull)deviceID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC14ApplicasterSDK17ApplicasterMember")
@interface ApplicasterMember : NSObject
+ (BOOL)isApplicasterMember SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isShowAnalyticUtilityAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ApplicasterSDK25AudioPlayerViewController")
@interface AudioPlayerViewController : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AudioPlayerViewController (SWIFT_EXTENSION(ApplicasterSDK)) <ZPPlayerProtocol>
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
- (void)pluggablePlayerRemoveInline;
- (void)pluggablePlayerPause;
- (void)pluggablePlayerStop;
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
- (void)pluggablePlayerSeekToSeconds:(NSTimeInterval)seconds;
- (void)pluggablePlayerSeekByDelta:(NSTimeInterval)delta;
- (void)pluggablePlayerMoveBackward;
- (void)pluggablePlayerMoveForward;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackPosition SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackDuration SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, JSDataSourceEnv, closed) {
  JSDataSourceEnvProduction = 0,
  JSDataSourceEnvCustomUrl = 1,
  JSDataSourceEnvLocal = 2,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
